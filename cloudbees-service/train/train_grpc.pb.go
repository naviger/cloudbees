// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: train.proto

package train

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TrainService_GetTrain_FullMethodName   = "/TrainService/GetTrain"
	TrainService_GetSeat_FullMethodName    = "/TrainService/GetSeat"
	TrainService_GetReceipt_FullMethodName = "/TrainService/GetReceipt"
	TrainService_ChangeSeat_FullMethodName = "/TrainService/ChangeSeat"
	TrainService_CancelSeat_FullMethodName = "/TrainService/CancelSeat"
)

// TrainServiceClient is the client API for TrainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainServiceClient interface {
	GetTrain(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainReply, error)
	GetSeat(ctx context.Context, in *SeatRequest, opts ...grpc.CallOption) (*SeatReply, error)
	GetReceipt(ctx context.Context, in *ReceiptRequest, opts ...grpc.CallOption) (*ReceiptReply, error)
	ChangeSeat(ctx context.Context, in *ChangeSeatRequest, opts ...grpc.CallOption) (*ChangeSeatReply, error)
	CancelSeat(ctx context.Context, in *CancelSeatRequest, opts ...grpc.CallOption) (*CancelSeatReply, error)
}

type trainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainServiceClient(cc grpc.ClientConnInterface) TrainServiceClient {
	return &trainServiceClient{cc}
}

func (c *trainServiceClient) GetTrain(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainReply, error) {
	out := new(TrainReply)
	err := c.cc.Invoke(ctx, TrainService_GetTrain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainServiceClient) GetSeat(ctx context.Context, in *SeatRequest, opts ...grpc.CallOption) (*SeatReply, error) {
	out := new(SeatReply)
	err := c.cc.Invoke(ctx, TrainService_GetSeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainServiceClient) GetReceipt(ctx context.Context, in *ReceiptRequest, opts ...grpc.CallOption) (*ReceiptReply, error) {
	out := new(ReceiptReply)
	err := c.cc.Invoke(ctx, TrainService_GetReceipt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainServiceClient) ChangeSeat(ctx context.Context, in *ChangeSeatRequest, opts ...grpc.CallOption) (*ChangeSeatReply, error) {
	out := new(ChangeSeatReply)
	err := c.cc.Invoke(ctx, TrainService_ChangeSeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainServiceClient) CancelSeat(ctx context.Context, in *CancelSeatRequest, opts ...grpc.CallOption) (*CancelSeatReply, error) {
	out := new(CancelSeatReply)
	err := c.cc.Invoke(ctx, TrainService_CancelSeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainServiceServer is the server API for TrainService service.
// All implementations must embed UnimplementedTrainServiceServer
// for forward compatibility
type TrainServiceServer interface {
	GetTrain(context.Context, *TrainRequest) (*TrainReply, error)
	GetSeat(context.Context, *SeatRequest) (*SeatReply, error)
	GetReceipt(context.Context, *ReceiptRequest) (*ReceiptReply, error)
	ChangeSeat(context.Context, *ChangeSeatRequest) (*ChangeSeatReply, error)
	CancelSeat(context.Context, *CancelSeatRequest) (*CancelSeatReply, error)
	mustEmbedUnimplementedTrainServiceServer()
}

// UnimplementedTrainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrainServiceServer struct {
}

func (UnimplementedTrainServiceServer) GetTrain(context.Context, *TrainRequest) (*TrainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrain not implemented")
}
func (UnimplementedTrainServiceServer) GetSeat(context.Context, *SeatRequest) (*SeatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeat not implemented")
}
func (UnimplementedTrainServiceServer) GetReceipt(context.Context, *ReceiptRequest) (*ReceiptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipt not implemented")
}
func (UnimplementedTrainServiceServer) ChangeSeat(context.Context, *ChangeSeatRequest) (*ChangeSeatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSeat not implemented")
}
func (UnimplementedTrainServiceServer) CancelSeat(context.Context, *CancelSeatRequest) (*CancelSeatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSeat not implemented")
}
func (UnimplementedTrainServiceServer) mustEmbedUnimplementedTrainServiceServer() {}

// UnsafeTrainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainServiceServer will
// result in compilation errors.
type UnsafeTrainServiceServer interface {
	mustEmbedUnimplementedTrainServiceServer()
}

func RegisterTrainServiceServer(s grpc.ServiceRegistrar, srv TrainServiceServer) {
	s.RegisterService(&TrainService_ServiceDesc, srv)
}

func _TrainService_GetTrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServiceServer).GetTrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainService_GetTrain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServiceServer).GetTrain(ctx, req.(*TrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainService_GetSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServiceServer).GetSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainService_GetSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServiceServer).GetSeat(ctx, req.(*SeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainService_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServiceServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainService_GetReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServiceServer).GetReceipt(ctx, req.(*ReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainService_ChangeSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServiceServer).ChangeSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainService_ChangeSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServiceServer).ChangeSeat(ctx, req.(*ChangeSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainService_CancelSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServiceServer).CancelSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainService_CancelSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServiceServer).CancelSeat(ctx, req.(*CancelSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainService_ServiceDesc is the grpc.ServiceDesc for TrainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TrainService",
	HandlerType: (*TrainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrain",
			Handler:    _TrainService_GetTrain_Handler,
		},
		{
			MethodName: "GetSeat",
			Handler:    _TrainService_GetSeat_Handler,
		},
		{
			MethodName: "GetReceipt",
			Handler:    _TrainService_GetReceipt_Handler,
		},
		{
			MethodName: "ChangeSeat",
			Handler:    _TrainService_ChangeSeat_Handler,
		},
		{
			MethodName: "CancelSeat",
			Handler:    _TrainService_CancelSeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "train.proto",
}
